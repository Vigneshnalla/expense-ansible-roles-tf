- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs:20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: installed
  loop:
    - nodejs
    - mysql

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: run app pre-requisites
  tags:
    - deployment
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req

- name: copy backend service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Enable backend service
  ansible.builtin.service:
    name: backend
    enabled: yes

- name: install python mysql dependencies
  ansible.builtin.pip:
    name:
      - PyMySQL
      - cryptography
    executable: pip3.9

- name: import data into mysql
  community.mysql.mysql_db:
    login_user: "{{ login_user }}"
    login_password: "{{ login_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    state: import
    name: all

- name: check MySQL installation
  ansible.builtin.command: mysql --version
  register: mysql_version_result
  ignore_errors: true

- name: debug MySQL version result
  ansible.builtin.debug:
    msg: "MySQL version: {{ mysql_version_result.stdout }}"
  when: mysql_version_result.rc == 0 # Only show if MySQL command was successful

- name: test MySQL connection
  ansible.builtin.command: |
    mysql -h {{ login_host }} -u {{ login_user }} -p{{ login_password }} -e "SELECT 1;"
  register: mysql_connection_result
  ignore_errors: true

- name: debug MySQL connection result
  ansible.builtin.debug:
    msg: "MySQL connection test output: {{ mysql_connection_result.stdout }}"
  when: mysql_connection_result.rc == 0 # Only show if connection command was successful

- name: start and enable backend service
  tags:
    - deployment
  ansible.builtin.service:
    name: backend
    state: restarted
